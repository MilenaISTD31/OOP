class Triangle:
    def __init__(self, m, a, y): # в метод __init__ должны передаваться величины, соответствующие длинам сторон треугольника
        self.__m = m
        self.__a = a
        self.__y = y

    def set_side_m(self, m): # для множества значений стороны м (?)
        if m < (self.__a + self.__y): # если м меньшесуммы длин других сторон, то выводим саму сторону м. Иначе появляется ошибка и выводится на экран
            self.__m = m
        else:
            raise ValueError("Длина одной стороны (M) не может превышать сумму длин других сторон (A и Y)") # raise - вызов ошибки

    def set_side_a(self, a):
        if a < (self.__m + self.__y):
            self.__a = a
        else:
            raise ValueError("Длина одной стороны (A) не может превышать сумму длин других сторон (M и Y)")

    def set_side_y(self, y):
        if y < (self.__m + self.__a):
            self.__y = y
        else:
            raise ValueError("Длина одной стороны (Y) не может превышать сумму длин других сторон (M и A)")

    def get_perimeter(self): # метод вычисляет и возвращает периметр прямоугольника
        return self.__m + self.__a + self.__y # Оператор return в Python используется для явного указания значения, которое должна вернуть функция

# Проверка. Задаем стороны, вычисляем периметр. Все ОК
triangle = Triangle(3, 4, 5)
print('Периметр для треугольника со сторонами 3, 4, 5: ', triangle.get_perimeter())

# Проверка соблюдения условий по правилу треугольника:
triangle.set_side_m(6) # меняем значения длины стороны m 
print('Периметр для треугольника со сторонами 6, 4, 5: ', triangle.get_perimeter())

# Вызов ошибки для значения длины, не соответствующей условиям
try:
    triangle.set_side_m(10)  # Вызовет ошибку ValueError
except ValueError as error: # ValueError: Вызывается, когда операция получает аргумент правильного типа, но неправильного значения.
    print('Периметр для треугольника со сторонами 10, 4, 5: ', error)  # Выводит: Длина стороны A не может превышать сумму длин сторон B и C

# В Python исключения обрабатываются с помощью блоков try/except. Для этого операция, которая может вызвать исключение, помещается внутрь блока try
# А код, который должен быть выполнен при возникновении ошибки, находится внутри except